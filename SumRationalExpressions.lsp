(defun transform (s) (list (trans (car s)) (trans (caddr s))
                     )
)

(defun trans (s) (cond ((atom (car s)) (list(cons (trans1 (car s)) (trans1 (caddr s)))))
                       ((atom (caddr s)) (cons (trans1 (car s)) (list (trans1 (caddr s)))))
                       (t (list (trans1 (car s)) (trans1 (caddr s))))
                 )
)

(defun trans1 (s) (cond ( (atom s) (cond ((numberp s) (list(list s 0)))
                                         (t (list(list 1 1)))
                                   )
                        )
                        (t (trans2 s))
                  )
)

(defun trans2 (s) (cond ((null s) nil)
                        ((numberp (car s)) (cond ((eq (cadr s) 'x) (cond ((eq (caddr s) '^) (cons (list (car s) (cadddr s)) (trans2 (cddddr s)))
                                                                         )
                                                                         (t (cons (list (car s) 1) (trans2 (cdddr s))))
                                                                   )
                                                 )
                                                 (t (cons (list (car s) 0) (trans2 (cdr s))))
                                           )
                        )
                        
                        ((eq (car s) 'x) (cond ((eq (cadr s) '^) (cons (list 1 (caddr s)) (trans2 (cdddr s)))
                                               )
                                               (t (cons (list 1 1) (trans2 (cdr s))))
                                         )
                        )
                        ((eq (car s) '+) (trans2 (cdr s))
                        )
                        ((eq (car s) '-) (cond ((eq (cadr s) 'x) (cond ((eq (caddr s) '^) (cons (list -1 (cadddr s)) (trans2 (cddddr s)))
                                                                      )
                                                                      (t (cons (list -1 1) (trans2 (cddr s))))
                                                                )
                                               )
                                               (t (trans2 (cons (- 0 (cadr s)) (cddr s) )))
                                         )
                        )
                  )
)


(defun mul (s1 s2) (list (* (car s1) (car s2)) (+ (cadr s1) (cadr s2))))

(defun dek1 (s1 s2) (cond ((null s1) nil)
                             (t (append (dek (car s1) s2) (dek1 (cdr s1) s2)))
                       )
)

(defun dek (a m) (cond ((null m) nil)
                       (t (cons (mul a (car m)) (dek a (cdr m))))
                 )
)

(defun mulNumerator (s) (append (dek1 (caar s) (cadadr s)) (dek1 (cadar s) (caadr s)))
)

(defun mulDenominator (s) ( dek1 (cadar s) (cadadr s)
                          )
)

(defun mulRes (s) (list (mulNumerator (transform s)) (mulDenominator (transform s)))
)

(defun Res (s) (mulRes s)
)

(defun simplification (s) (list (simpl1 (car s)) (simpl1 (cadr s)))
)

(defun simpl1 (s)  (cond ((null s) nil)
                                 (t (let ((x  (simpl (cdr s) (car s) ())))
                                     (cons (car x) (cond ((null (cdr x)) nil)
                                                         ((null (cddr x)) (cdr x))
                                                         (t (simpl1 (cdr x)))
                                                   )
                                     )
                                   )
                                 )
                           )
)

(defun Result (s) (show (simplification (Res s)))
)

(defun show (s) (append (showList (car s)) (cons '/ (showList (cadr s))))
)

(defun showList (s) (cond ((null s) (list 0))
                          ((= 0 (caar s)) (showList (cdr s)))
                          (t (append (showEl (car s)) (showl (cdr s))))
                    )
)

(defun showl (s) (cond ((null s) nil)
                       (t (append (showElSign (car s)) (showl (cdr s))))
                 )
)

(defun showElSign (s) (cond 
                        ((> (car s) 1) (cond ((> (cadr s) 1) (list '+ (car s) 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '+ (car s) 'x))
                                             (t (list '+ (car s)))
                                       )
                        )
                        ((= (car s) 1) (cond ((> (cadr s) 1) (list '+ 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '+ 'x))
                                             (t (list '+ (car s)))
                                       )
                        )
                        ((< (car s) -1) (cond ((> (cadr s) 1) (list '- (- 0 (car s)) 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '- (- 0 (car s)) 'x))
                                             (t (list '- (- 0 (car s))))
                                       )
                        )
                        ((= (car s) -1) (cond ((> (cadr s) 1) (list '- 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '- 'x))
                                             (t (list '- (- 0 (car s))))
                                       )
                        )
                        
                  )
)

(defun showEl (s) (cond 
                        ((> (car s) 1) (cond ((> (cadr s) 1) (list  (car s) 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list  (car s) 'x))
                                             (t (list (car s)))
                                       )
                        )
                        ((= (car s) 1) (cond ((> (cadr s) 1) (list 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list 'x))
                                             (t (list (car s)))
                                       )
                        )
                        ((< (car s) -1) (cond ((> (cadr s) 1) (list '- (- 0 (car s)) 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '- (- 0 (car s)) 'x))
                                             (t (list '- (- 0 (car s))))
                                       )
                        )
                        ((= (car s) -1) (cond ((> (cadr s) 1) (list '- 'x '^ (cadr s)))
                                             ((= (cadr s) 1) (list '- 'x))
                                             (t (list '- (- 0 (car s))))
                                       )
                        )
                        
                        
                  )
)

(defun simpl (l s1 s2) (cond ((null l) (cons s1 s2))
                             ((= (cadr s1) (cadar l)) (simpl (cdr l) (list (+ (car s1) (caar l)) (cadr s1)) s2))
                             (t (simpl (cdr l) s1 (cons (car l) s2)))
                       ) 
)


(print (Result '( ((x - 1) / 1) + ((- x ^ 2 + 3) /x))))
(print (Result '(((x ^ 5 - 8 + 7 x ^ 3) / (x - 1)) + ((x + 8) / (x + 1)))))
(print (Result '(((x + 1) / (x + 1)) + ((x - 1) / (x - 1)))))
(print (Result '(((x ^ 2 + 2 x + 1) / (x + 1)) + ((2 - x - 3) / 1 ))))